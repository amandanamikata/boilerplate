name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [product-service, user-service, order-service, api-gateway]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.service }}/package-lock.json

    - name: Install dependencies
      working-directory: ./${{ matrix.service }}
      run: npm ci

    - name: Run tests
      working-directory: ./${{ matrix.service }}
      run: npm test || echo "No tests configured yet"

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [product-service, user-service, order-service, api-gateway]

    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG }}

    - name: Update image tags in manifests
      run: |
        sed -i "s|YOUR_REGISTRY|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}|g" k8s/*.yaml
        sed -i "s|:latest|:main-${{ github.sha }}|g" k8s/*.yaml

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/secrets.yaml -n simple-store
        kubectl apply -f k8s/mongodb/ -n simple-store
        kubectl apply -f k8s/product-service.yaml -n simple-store
        kubectl apply -f k8s/user-service.yaml -n simple-store
        kubectl apply -f k8s/order-service.yaml -n simple-store
        kubectl apply -f k8s/api-gateway.yaml -n simple-store

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/product-service -n simple-store --timeout=5m
        kubectl rollout status deployment/user-service -n simple-store --timeout=5m
        kubectl rollout status deployment/order-service -n simple-store --timeout=5m
        kubectl rollout status deployment/api-gateway -n simple-store --timeout=5m
        kubectl get pods -n simple-store
